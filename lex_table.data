keyword int
identifier a
operator ,
identifier b
operator =
number 234
operator ,
identifier c
operator =
number 2e4
limiter ;
keyword function
keyword int
identifier max
operator (
keyword int
identifier a
operator ,
keyword int
identifier b
operator )
limiter {
keyword if
operator (
identifier a
operator >
identifier b
operator )
keyword return
identifier a
limiter ;
keyword else
keyword return
identifier b
limiter ;
limiter }
keyword function
keyword double
identifier min
operator (
keyword int
identifier A
operator ,
keyword int
identifier B
operator )
limiter {
keyword if
operator (
identifier A
operator <
identifier B
operator )
keyword return
identifier A
limiter ;
keyword else
keyword return
identifier B
limiter ;
limiter }
keyword function
keyword int
identifier main
operator (
operator )
limiter {
keyword double
identifier sum_1_to_50
operator =
number 0
limiter ;
keyword for
operator (
keyword int
identifier i
operator =
number 1
limiter ;
identifier i
operator <
number 100
limiter ;
identifier i
operator +
operator =
number 1
operator )
limiter {
keyword if
operator (
identifier i
operator <
number 50
operator )
keyword break
limiter ;
keyword else
identifier sum_1_to_50
operator +
operator =
identifier i
limiter ;
limiter }
keyword int
identifier k
operator =
number 0
operator ,
identifier s
operator =
operator (
operator (
number 534
operator -
number 23
operator )
operator +
number 423
operator )
operator *
number 23
limiter ;
keyword while
operator (
identifier k
operator <
number 40
operator )
keyword scan
operator (
identifier s
operator )
limiter ;
keyword int
identifier A
operator =
number 50
operator ,
identifier B
operator =
number 23
operator ,
identifier C
limiter ;
identifier C
operator =
keyword function
identifier max
operator (
identifier A
operator ,
identifier B
operator )
limiter ;
keyword print
operator (
identifier C
operator )
limiter ;
keyword print
operator (
identifier A
operator +
identifier B
operator *
identifier C
operator )
limiter ;
keyword return
number 0
limiter ;
limiter }
